## Label Encoding

from sklearn.preprocessing import LabelEncoder

coffee = ['아메리카노', '카페라떼', '바닐라라떼', '카푸치노', '플랫화이트']

encoder = LabelEncoder()
encoder.fit(coffee)
labels = encoder.transform(coffee)
print('encoded values: ', labels) # [1 2 0 3 4]

print('encoding class: ', encoder.classes_) # ['바닐라라떼' '아메리카노' '카페라떼' '카푸치노' '플랫화이트']
print('decoded original values: ', encoder.inverse_transform([3,4,0,1,0,2,1,1])) # ['카푸치노' '플랫화이트' '바닐라라떼' '아메리카노' '바닐라라떼' '카페라떼' '아메리카노' '아메리카노']

## one hot encoding
from sklearn.preprocessing import OneHotEncoder
import numpy as np

coffee = ['아메리카노', '카페라떼', '바닐라라떼', '카푸치노', '플랫화이트']

encoder = LabelEncoder()
encoder.fit(coffee)
labels = encoder.transform(coffee)

labels = labels.reshape(-1, 1) # convert to 2 dimensional data

one_hot = OneHotEncoder()
one_hot.fit(labels)
one_hot_labels = one_hot.transform(labels)

print('one hot encoded data')
print(one_hot_labels.toarray())
print('one hoe encoded data shape: ', one_hot_labels.shape) # (5, 5)

import pandas as pd

coffee_df = pd.DataFrame({'coffee':['아메리카노', '카페라떼', '바닐라라떼', '카푸치노', '플랫화이트'] })
print(coffee_df)

# Convert categorical variable into dummy/indicator variables.
# https://pandas.pydata.org/docs/reference/api/pandas.get_dummies.html
print(pd.get_dummies(coffee_df))

## StandardScaler

from sklearn.datasets import load_iris

iris = load_iris()
iris_df = pd.DataFrame(data=iris.data, columns=iris.feature_names)

print('mean value of features')
print(iris_df.mean())
print('\n variance value of features')
print(iris_df.var())

from sklearn.preprocessing import StandardScaler

# standardization - make Gaussian normal distribution (mean 0, variance 1)

scaler = StandardScaler()
scaler.fit(iris_df)
iris_scaled = scaler.transform(iris_df) # iris_scaled: numpy ndarray

iris_df_scaled = pd.DataFrame(data=iris_scaled, columns=iris.feature_names)
print('mean value of features (after standardization)')
print(iris_df_scaled.mean())
print('\nvariance value of features (after standardization)')
print(iris_df_scaled.var())

from sklearn.preprocessing import MinMaxScaler

# regularization - rescale value from 0 to 1

scaler = MinMaxScaler()
scaler.fit(iris_df)
iris_scaled = scaler.transform(iris_df)

iris_df_scaled = pd.DataFrame(data=iris_scaled, columns=iris.feature_names)
print('minimum value of features (after regularization)')
print(iris_df_scaled.min())
print('\nmaximum value of features (after regularization)')
print(iris_df_scaled.max())
